package logica;
import java.util.*;
public class Juego {
	
	private static Juego INSTANCE;
	private ArrayList<Jugador> topScores;
	
	
	private Juego() {
		this.topScores = new ArrayList<Jugador>();
	}
	
	
	public void nuevoJuego(String nombre){
		Partida.initInstance(nombre);
	};
	
	
	public static Juego initInstance (String nombre) {
		if (INSTANCE == null) {
			INSTANCE = new Juego();
			return INSTANCE;
		} else {
			System.out.println("Ya existe una instancia de partida.");
			return INSTANCE;
		}
	}
	
	
	/** Realiza un ciclo de la partida. Además, si la partida terminó agrega al jugador a la lista. Para esto
	 * verifica que el jugador no esté ya en la lista, para evitar duplicados si siguen mandando turnos a 
	 * una partida terminada; si el arrego es vacío, para no comparar en un arreglo vacío; y luego si 
	 * el puntaje es mayor al mínimo del arreglo, en ese caso se reemplaza uno por otro y se ordena
	 * el arreglo.
	 * @param dir La dirección en la que debe moverse Félix durante este turno
	 * @param martillazos La cantidad de martillazos que debe dar Félix durante este turno**/
	public void turno(String dir, int martillazos) {
		/**if (this.partidaActual.ciclo(dir, martillazos)) {
			if (!(this.topScores.contains(this.partidaActual.getJugador()))) {
				if (!this.topScores.isEmpty()) {
					if (this.partidaActual.getJugador().getPuntaje() > Collections.min(this.topScores).getPuntaje()) {
						this.topScores.add(this.partidaActual.getJugador());
						this.topScores.remove(Collections.min(this.topScores));
						Collections.sort(this.topScores);
					}
				} else this.topScores.add(this.partidaActual.getJugador());
			}
		}**/
	}
	
	/**Imprime los cinco puntajes más altos. **/
	public void imprimirTopScores() {
		System.out.println("------------Mejores puntajes------------");
		for (Jugador jug : this.topScores) {
			System.out.println(jug.toString());
		}
		System.out.println("----------------------------------------");
	}
}