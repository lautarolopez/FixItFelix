package logica;
import java.util.*;

public class Partida {

	private int tiempo;
	private int dificultad;
	private Felix pj;
	private Ralph boss;
	private Jugador player;
	private Edificio tablero;
	private ArrayList<Objeto> objetosPartida;
	
	public Partida(String nombre) {
		this.tiempo = 120;
		this.dificultad = 1;
		this.pj = new Felix();
		this.boss = new Ralph();
		this.player = new Jugador(nombre);
		this.tablero = new Edificio(this.dificultad);
		this.objetosPartida = new ArrayList<Objeto>();
	}
	
	/**Cada ciclo representa una unidad de tiempo del juego, donde se hacen todas las comprobaciones y comparaciones
	 * necesarias. **/
	
	public boolean ciclo(String dir, int martillazos) {
		
		if (this.tiempo != 0 && this.pj.getVidas() !=0 && this.dificultad < 11) { ///Ejecuta el ciclo si todavía hay tiempo, si Félix todavía tiene vidas y si no terminamos los diez niveles.
		
			//// BLOQUE DE ACCIONES
			
			
			
			/**Suma puntos si Félix repara una ventana. (Set puntaje aumenta el puntaje, no lo setea.)**/
			this.player.setPuntaje(this.pj.repararVentana(this.tablero.getVentanas(), martillazos, this.tablero.nivelTerminado()));
			
			
			/**Método privado que analiza si hubo algún evento entre Félix y los objetos de la partida que afecte
			 *  el estado de la partida. **/
			this.gestionarColisiones();
			
			
			
			////BLOQUE DE ACTUALIZACIONES
			
			
			/**Si el tablero decide generar un pájaro (es aleatorio) agrega un Objeto Pájaro a los elementos de la partida.**/
			if (tablero.generarPajaro()) {
				Posicion posi = new Posicion(0, 0);
				Objeto p = new Pajaro(posi, this.tablero.getVentanas());
				this.objetosPartida.add(p);
				System.out.println("Se creó un pájaro en " + p.getPosicion().toString());
			}


			
			/**Si Ralph decide generar un ladrillo agrega un nuevo Objeto Ladrillo al vector de objetos de la partida. **/
			if (boss.generarLadrillo(dificultad)) {
				Posicion posi = new Posicion(0, 0);
				Objeto l = new Ladrillo(posi, this.tablero.getVentanas());
				this.objetosPartida.add(l);
				System.out.println("Se creó un ladrillo en " + l.getPosicion().toString());
			}


			
			/**Actualiza todos los objetos del arreglo de Objetos de la partida, cada uno implementa 
			 * una actualización distinta. **/
			for (Objeto obj : this.objetosPartida) {
				obj.actualizar(dificultad, this.tablero.getVentanas());
			}
			
			
			
			
			/**Mueve a Félix en la dirección que recibe en este turno. **/
			this.pj.mover(dir, this.tablero.getVentanas());
			
			
			
			
			/**Pregunta a cada elemento si debe destruirlo. De ser así lo elimina del arreglo de objetos de la partida. 
			 * Cada Objeto sabe cuándo debe ser destruído. **/
			Iterator<Objeto> iter = this.objetosPartida.iterator();
			while (iter.hasNext()) {
				Objeto obj = iter.next();
				if (obj.destruir()) {
					System.out.println("Se destruyó " + obj.toString() + " por terminar su ciclo de vida.");
					iter.remove();
				};
			}
			
						
			/** Consulta a todas las ventanas si debe generar un Nicelander. Cada ventana lo implementa a su manera. Si le retornan
			 * verdadero crea una nueva instancia de Objeto Nicelander y lo agrega a la lista de elementos de la partida. **/
			for (ArrayList<Ventana> arrVent : this.tablero.getVentanas()) {
				for (Ventana vent : arrVent) {
					if (vent.generarNicelander()) {
						Objeto n = new Nicelander(vent.getPos(), this.tablero.getVentanas());
						this.objetosPartida.add(n);
						System.out.println("Se creó un Nicelander en " + n.getPosicion().toString());
					}
				}
			}

			
			
			
			/**Si se terminó el nivel se crea un nuevo tablero con mayor dificultad. Es importante
			 * verificar primero el nivel y luego la etapa porque si terminamos la última etapa el
			 * tablero va a intentar llevarnos a la etapa 4 del nivel, que no existe. **/
			if (this.tablero.nivelTerminado()) {
				this.dificultad++;
				this.tablero = new Edificio (dificultad);
				this.pj.reset();
				this.objetosPartida.removeAll(objetosPartida);
				System.out.println("Terminaste el nivel " + dificultad + ", felicidades!");
			}
			
			
			
			/** Si termina la sección avanzamos a la próxima etapa.**/
			if (this.tablero.seccionTerminada()) {
				this.tablero.proximaEtapa();
				this.pj.reset();
				this.objetosPartida.removeAll(objetosPartida);
				System.out.println("Siguiente etapa.");
			}
			
			
			/** Este bloque brinda información del estado de la partida para verificar el correcto funcionamiento de todo el 
			 * ecosistema del juego en curso. **/
			this.tiempo--; //Decrementamos el tiempo para el próximo ciclo.
			System.out.println("Tiempo restante: " + tiempo);
			System.out.println("Vidas restantes: " + pj.getVidas());
			System.out.println("Nivel actual: " + dificultad);
			switch (this.tablero.getSeccionActual()) {
			case 0: {
				System.out.println("Sección actual: Suelo");
				break;
			}
			case 1:{
				System.out.println("Sección actual: Media");
				break;
			}
			case 2:{
				System.out.println("Sección actual: Más alta");
				break;
			}
			}
			System.out.println("-------------------------FIN DE CICLO-----------------------");
			return false;
		
		} else { //Si el tiempo o las vidas de Félix llegan a cero se termina el juego. Si la dificultad (que a su vez es el nivel) es mayor que diez el jugador ganó el juego.
			if (this.dificultad <= 10) {
				System.out.print("Game over!");
			} else {
				System.out.print("Ganaste cruck!");
			}
		return true;	
		}
		
	}
	
	
	private void gestionarColisiones() {
		if (this.tablero.getVentanas().get(this.pj.getPosFelix().getX()).get(this.pj.getPosFelix().getY()).pajaro()) {
			this.objetosPartida.removeAll(objetosPartida);
			this.tablero.reiniciarEtapa(dificultad);
			this.pj.reset();
			System.out.println("Chocó con un pájaro y se reinició la etapa.");
		} else {
			if (this.tablero.getVentanas().get(this.pj.getPosFelix().getX()).get(this.pj.getPosFelix().getY()).ladrillo()) {
				this.pj.perderVida();
				this.tablero = new Edificio(dificultad);
				this.objetosPartida.removeAll(objetosPartida);
				this.pj.reset();
				System.out.println("Chocó con un ladrillo y se reinicia el nivel.");
			} else {
				if (this.tablero.getVentanas().get(this.pj.getPosFelix().getX()).get(this.pj.getPosFelix().getY()).ladrillo()){
					this.pj.setInvulnerable();
					System.out.println("Félix ahora es invulnerable!");
				}
			}
		}
	}
	
	public Jugador getJugador() {
		return this.player;
	}
	
	
	
}
